#!/usr/bin/perl

use strict;
use warnings;

use IO::Termios;
use IO::Select;

my $usage = "usage: monitor SERIALPORT\ne.g. monitor /dev/ttyACM0\n";

my $device = shift or die "$usage\n";

my $NSWITCHES = 10;

my $serial = IO::Termios->open($device, "115200,8,n,1")
    or die "can't open $device: $!\n";

# get the Arduino into a known-good state
print $serial "speed 300\n";
print $serial "stop\n";

my $presses = 0;
my $speed = 300;
my $running = 0;

my %recording;
my %function = (
    start => \&func_start,
    stop => \&func_stop,
    record => \&func_record,
    finish => \&func_finish,
    rm => \&func_rm,
    graph => \&func_graph,
    speed => \&func_speed,
    status => \&func_status,
    help => \&func_help,
    exit => \&func_quit,
    quit => \&func_quit,
);

$| = 1;

$SIG{INT} = \&func_quit;

my $help = qq{
Accepted commands:

  start [RPM]        Start the motor (with optional RPM setting).
  stop               Stop the motor.
  record N|all FILE  Record the data from switch N to the given FILE, or all switches to FILE-N.dat
  finish N|all       Stop recording from switch N, or all switches.
  rm FILE            Remove the given FILE.
  graph N|FILE|all   Graph the given switch N or FILE, or all switches.
  speed RPM          Set motor speed to the given RPM.
  status             Report current status.
  help               Show help.
  exit/quit          Exit.
};

print "Keyswitch tester monitor. Type 'help' for help.\n\n";

print "> ";

my $s = IO::Select->new();
$s->add(\*STDIN);
$s->add($serial);

my %buffer;

while (my @ready = $s->can_read) {
    # whenever a fh is ready, read bytes from it, buffer input, split on lines, and
    # pass off to fh-specific handler (we can't just <$fh> because select() wouldn't
    # alert us to data that perl has buffered, e.g. in the event that we get 2 lines from
    # a single sysread() call)
    for my $fh (@ready) {
        my $data;
        my $n = sysread($fh, $data, 1024, 0);
        if ($n == 0 && $fh == \*STDIN) {
            func_quit();
        }
        $buffer{$fh} .= $data;

        while ($buffer{$fh} =~ s/^(.*?\n)//m) {
            my $line = $1;
            $line =~ s/[\r\n]//gm;

            if ($fh == $serial) {
                handle_serial($line);
            } else {
                handle_stdin($line);
            }
        }
    }
}

sub handle_serial {
    my ($line) = @_;

    if ($line =~ /^error:/) {
        print STDERR "error from Arduino: $line\n";
        return;
    }

    if ($line =~ /^(\d+)([+-])(\d+)$/) {
        my $step = $1;
        my $gainedlost = $2;
        my $switch = $3;
        if ($recording{$switch}) {
            my $fh = $recording{$switch}{fh};
            print $fh "$step$gainedlost\n";
        }
    }

    if ($line =~ /^\.$/) {
        $presses++;
        for my $switch (keys %recording) {
            $recording{$switch}{presses}++;
            my $fh = $recording{$switch}{fh};
            print $fh ".\n";
        }
    }
}

sub handle_stdin {
    my ($line) = @_;

    my @words = split /\s+/, $line;

    if (@words) {
        if ($function{$words[0]}) {
            $function{$words[0]}->(@words);
        } else {
            print "unrecognised command: $words[0]\n";
        }
    }

    print "> ";
}

sub func_start {
    my (@words) = @_;

    if (@words > 1) {
        if ($words[1] !~ /^\d+$/) {
            print "usage: start [RPM]\n";
            return;
        }

        $speed = $words[1];
        print $serial "speed $words[1]\n";
    }

    $running = 1;
    $presses = 0;
    print $serial "start\n";
}

sub func_stop {
    $running = 0;
    print $serial "stop\n";
}

sub func_record {
    my (@words) = @_;

    if (@words != 3 || ($words[1] !~ /^\d+$/ && $words[1] ne 'all')) {
        print "usage: record N|all FILE\n";
        return;
    }

    if ($words[1] eq 'all') {
        for my $n (0..$NSWITCHES-1) {
            # XXX: act like the user typed it...
            func_record('record', $n, "$words[2]-$n.dat");
        }
        return;
    }

    my $switch = $words[1];
    my $file = $words[2];

    if ($recording{$switch}) {
        print "already recording switch $switch to $recording{$switch}{filename}\n";
        return;
    }

    my $fh;
    if (!open($fh, '>>', $file)) {
        print "can't write $file: $!\n";
        return;
    }

    $recording{$switch} = {
        fh => $fh,
        filename => $file,
        presses => 0,
    };
}

sub func_finish {
    my (@words) = @_;

    if (@words != 2 || ($words[1] !~ /^\d+$/ && $words[1] ne 'all')) {
        print "usage: finish N|all\n";
        return;
    }

    if ($words[1] eq 'all') {
        for my $switch (keys %recording) {
            next if !$recording{$switch};
            close $recording{$switch}{fh};
            delete $recording{$switch};
        }
        return;
    }

    my $switch = $words[1];
    if (!$recording{$switch}) {
        print "not recording switch $switch\n";
        return;
    }

    close $recording{$switch}{fh};
    delete $recording{$switch};
}

sub func_rm {
    my (@words) = @_;

    if (@words != 2) {
        print "usage: rm FILE\n";
        return;
    }

    my $file = $words[1];
    if (!-e $file) {
        print "$file does not exist\n";
        return;
    }

    if (!unlink $file) {
        print "unlink $file: $!\n";
        return;
    }
}

sub func_graph {
    my (@words) = @_;

    if (@words != 2) {
        print "usage: graph N|FILE|all\n";
        return;
    }

    if ($words[1] eq 'all') {
        for my $switch (keys %recording) {
            next if !$recording{$switch};
            system("./graph $recording{$switch}{filename} &");
        }
        return;
    }

    my $file = $words[1];

    if ($words[1] =~ /^\d+$/ && $recording{$words[1]}) {
        $file = $recording{$words[1]}{filename};
    }

    system("./graph $file &");
}

sub func_speed {
    my (@words) = @_;

    if (@words != 2 || $words[1] !~ /^\d+$/) {
        print "usage: speed RPM\n";
        return;
    }

    $speed = $words[1];
    print $serial "speed $words[1]\n";
}

sub func_status {
    print "speed = $speed rpm\n";
    print "$presses presses since last start\n";
    print "" . ($running ? "Running\n" : "Not running\n");
    if (!keys %recording) {
        print "Not recording\n";
    }
    for my $switch (keys %recording) {
        print "Recording switch $switch to $recording{$switch}{filename}: $recording{$switch}{presses} presses\n";
    }
}

sub func_help {
    print "$help\n";
}

sub func_quit {
    print $serial "stop\n";
    print "Be seeing you.\n";
    exit 0;
}
